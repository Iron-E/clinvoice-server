# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: 'apps/v1'
kind: 'Deployment'
metadata: &metadata
  labels: &labels
    app.kubernetes.io/name: &appName 'winvoice-server'
    app.kubernetes.io/version: &appVersion '0.6.2'
    app.kubernetes.io/component: 'backend'
    app.kubernetes.io/part-of: &projectName 'winvoice'
  namespace: &namespace 'example'
  name: 'winvoice.backend'
spec:
  replicas: 3
  selector:
    matchLabels: *labels
  strategy:
    rollingUpdate:
      maxSurge: '25%'
      maxUnavailable: '25%'
    type: 'RollingUpdate'
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: 'winvoice-server'
      labels: *labels
      namespace: *namespace
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      restartPolicy: 'Always'
      containers:
        - name: 'winvoice-server'
          image: 'winvoice-server:0.6.2'
          imagePullPolicy: 'IfNotPresent'
          resources:
            requests:
              cpu: '100m'
              memory: '100Mi'
            limits:
              cpu: '100m'
              memory: '100Mi'

          ports:
            - containerPort: 3000
              name: 'winvoice-server'
              protocol: 'TCP'

          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: '/_status/healthy'
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10

          command: ['/bin/sh', '-c']
          args:
            - >-
              'winvoice-server
              --certificate /run/secrets/server-ssl/cert.pem
              --key /run/secrets/server-ssl/key.pem
              --cors-allow-origin /run/secrets/server/cors/allow.txt
              --permissions-model /run/mount/server/permissions/model.conf
              --permissions-policy /run/mount/server/permissions/policy.csv
              postgres
              --host winvoice-database-rw
              --database winvoice
              --username "$(cat /run/secrets/db/user.txt)"
              --password "$(cat /run/secrets/db/password.txt)"'

          volumeMounts:
            - name: 'database-credentials'
              mountPath: '/run/secrets/db'
              readOnly: true
            - name: 'server-cors'
              mountPath: '/run/secrets/server/cors'
              readOnly: true
            - name: 'server-permissions'
              mountPath: '/run/mount/server/permissions'
              readOnly: true

      volumes:
        - name: 'server-cors'
          secret:
            secretName: 'winvoice.backend.cors'
            items:
              - key: 'allow'
                path: 'allow.txt'
        - name: 'server-permissions'
          configMap:
            name: 'winvoice.backend.permissions'
            items:
              - key: 'model'
                path: 'model.conf'
              - key: 'policy'
                path: 'policy.csv'
        - name: 'database-credentials'
          secret:
            secretName: 'winvoice.database.login'
            items:
              - key: 'username'
                path: 'name.txt'
              - key: 'password'
                path: 'password.txt'
---
