# This is an EXAMPLE of using winvoice-server with Postgres

name: 'winvoice'

configs:
  server-permissions-model: {file: 'config/server/permissions/model.conf'}

secrets:
  db: {file: 'config/db/'}
  server-cors: {file: 'config/server/cors/'}
  server-permissions-policy: {file: 'config/server/permissions/policy.csv'}
  server-ssl-cadir: {file: 'config/server/ssl-cadir/'}
  server-ssl: {file: 'config/server/ssl/'}

networks:
  backend: null

volumes:
  db-data: null
  server-logs: null

services:
  db:
    image: 'postgres'
    user: 'postgres'

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready --dbname "$(cat /run/secrets/db/name.txt)" --username "$(cat /run/secrets/db/user.txt)"']
      interval: '10s'
      timeout: '5s'
      retries: 5
    restart: 'always'

    environment:
      POSTGRES_DB_FILE: '/run/secrets/db/name.txt'
      POSTGRES_PASSWORD_FILE: '/run/secrets/db/password.txt'
      POSTGRES_USER_FILE: '/run/secrets/db/user.txt'
    secrets:
      - 'db'
    volumes:
      - 'db-data:/var/lib/postgresql/data'

    expose: [5432]
    networks: ['backend']

  server:
    image: 'winvoice/server:${WINVOICE_SERVER_TAG:-v0.6.2}'
    build: '../docker'

    depends_on:
      db: {condition: 'service_healthy'}
    healthcheck:
      test: ['CMD-SHELL', 'test $(curl -fsw "%{http_code}" https://localhost:3000) -eq 400 && exit 0 || exit 1']
      interval: '10s'
      timeout: '5s'
      retries: 5
    restart: 'always'

    configs:
      - 'server-permissions-model'
    secrets:
      - 'server-cors'
      - 'db'
      - 'server-permissions-policy'
      - 'server-ssl'
      - source: 'server-ssl-cadir'
        target: '/etc/ssl/certs'
    volumes:
      - 'server-logs:$HOME/.local/state/winvoice-server'

    networks: ['backend']
    ports: ['3000:3000']

    entrypoint: ['/bin/sh', '-c']
    command: >-
        'winvoice-server
        --address ${WINVOICE_SERVER_ADDR:-"0.0.0.0:3000"}
        --certificate /run/secrets/server-ssl/cert.pem --key /run/secrets/server-ssl/key.pem
        --cors-allow-origin /run/secrets/server-cors/allow.txt
        --permissions-model /server-permissions-model --permissions-policy /run/secrets/server-permissions-policy
        postgres
        --host db --database "$(cat /run/secrets/db/name.txt)"
        --username "$(cat /run/secrets/db/user.txt)" --password "$(cat /run/secrets/db/password.txt)"'
